// Vector iterator
#include <vector>
vector<int> v;

for (auto iter = v.begin(); iter != v.end(); iter++) {
    cout << *iter << endl;
}

// Reverse
#include <vector>
#include <algorithm>
vector<int> v = { 10, 40, 50, 30, 20 };
reverse(v.begin(), v.end());

// Vector Slice
#include <vector>
numbers : [1, 2, 3, 4, 5];
vector<int> answer = vector<int>(numbers.begin() + first, numbers.begin() + last+1);

//약수 구하기
#include <cmath>
#include <vector>
using namespace std;
int main()
{
    int n = 6;
    vector<int> result;
    int cnt =0;
    for(int i=1;i<=sqrt(n);++i) // n의 제곱근까지만 탐색한다.
    {
        if(n%i == 0)
        {
            if(i != n/i)result.push_back(n/i); 
            // 4와 같이 1, 2, 4 약수를 가질때 중복된 2를 두번 검사하지않게 조건을 건다.
            result.push_back(i);             
        }
    }
    
}

//람다 함수를 통한 sort 알고리즘에 인자 추가하기
struct Person {
    string name;
    int age;
};

auto compare = [](Person a, Person b, bool sortByAge) {
        if (sortByAge) {
            return a.age < b.age;
        } else {
            return a.name < b.name;
        }
};

vector<Person> people = {{"Alice", 25}, {"Bob", 20}, {"Charlie", 30}};

sort(people.begin(), people.end(), [&](Person a,Person b) {
        return compare(a, b, true);
    });